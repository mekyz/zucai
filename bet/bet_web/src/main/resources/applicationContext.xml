<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.3.xsd  
        http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-4.3.xsd  
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd"
>
	<!-- 加载数据库属性配置文件 -->
	<context:property-placeholder location="classpath:db-test.properties" />
	<!-- cacheManager, 指定ehcache.xml的位置 -->
	<bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">
			<value>classpath:ehcache.xml</value>
		</property>
		<!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
		<property name="shared" value="true" />
	</bean>
	<!-- 数据库连接池c3p0配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${db.url}"></property>
		<property name="driverClass" value="${db.driverClassName}"></property>
		<property name="user" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<!-- 连接池初始化时创建的连接数,default : 3（建议使用） -->
		<property name="initialPoolSize" value="3"></property>
		<!-- 连接池保持的最小连接数,default : 3（建议使用） -->
		<property name="minPoolSize" value="3"></property>
		<!-- 连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大,default : 15（建议使用） -->
		<property name="maxPoolSize" value="100"></property>
		<!-- 连接池在无空闲连接可用时一次性创建的新数据库连接数,default : 3（建议使用） -->
		<property name="acquireIncrement" value="3"></property>
		<!-- 连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接。default : 0 单位 s（建议使用） -->
		<property name="maxIdleTime" value="20"></property>
		<!-- 最大的Statement的数量 -->
		<property name="maxStatements" value="0"></property>
		<!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="100"></property>
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
		<property name="checkoutTimeout" value="60000"></property>
		<!-- Idle time before a C3P0 pooled connection is validated 每隔120秒检查连接池里的空闲连接 ，单位是秒 -->
		<property name="idleConnectionTestPeriod" value="120"></property>
	</bean>
	<!-- session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.bet.orms</value>
			</list>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="nestedTransactionAllowed" value="true" />
	</bean>
	<!-- 配置事务通知属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事务传播属性 -->
		<tx:attributes>
			<!-- 定时任务需要新开一个transaction -->
			<tx:method name="update*Job" propagation="REQUIRES_NEW" rollback-for="Exception" />
			<tx:method name="checkAndUpdate*Job" propagation="REQUIRES_NEW" rollback-for="Exception" />
			<!-- 普通需要更新数据库的放到这里 -->
			<tx:method name="add*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="update*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="register*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="login*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="upload*" propagation="NESTED" rollback-for="Exception" />
			<tx:method name="required*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切面 -->
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* com.bet.services.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
	<!-- 自动加载构建bean -->
	<context:component-scan base-package="com.bet.actions" />
	<context:component-scan base-package="com.bet.interceptors" />
	<context:component-scan base-package="com.bet.daos" />
	<context:component-scan base-package="com.bet.services" />
	<context:component-scan base-package="com.lrcall.daos" />
	<context:component-scan base-package="com.lrcall.services" />
	<!-- 一、定时任务 -->
	<!-- 1,简单的任务 -->
	<bean id="updateStatJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateStatJob" />
	</bean>
	<!-- 检查用户有效期情况 -->
	<bean id="updateCheckUserValideDateJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateCheckUserValideDateJob" />
	</bean>
	<!-- 计算用户下注的中奖情况 -->
	<bean id="updateCheckUserBetBonusJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateCheckUserBetBonusJob" />
	</bean>
	<!-- 计算用户下注的团队奖金 -->
	<bean id="updateCheckUserBetTeamBonusJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateCheckUserBetTeamBonusJob" />
	</bean> 
	<!-- 汇总每场比赛的团队奖金 -->
	<bean id="updateCheckTeamBonusJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateCheckTeamBonusJob" />
	</bean>
	<!-- 发放团队奖金 -->
	<bean id="updateTeamBonusJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="cStatService" />
		<property name="targetMethod" value="updateTeamBonusJob" />
	</bean>
	<!-- 2,计划触发器 -->
	<bean id="updateStatJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateStatJob" />
		<property name="cronExpression" value="0 30 1 * * ?" />
	</bean>
	<bean id="updateCheckUserValideDateJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateCheckUserValideDateJob" />
		<property name="cronExpression" value="0 0 3 * * ?" />
	</bean>
	<bean id="updateCheckUserBetBonusJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateCheckUserBetBonusJob" />
		<property name="cronExpression" value="0 10 * * * ?" />
	</bean>
	<bean id="updateCheckUserBetTeamBonusJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateCheckUserBetTeamBonusJob" />
		<property name="cronExpression" value="15 20 * * * ?" />
	</bean>
	<bean id="updateCheckTeamBonusJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateCheckTeamBonusJob" />
		<property name="cronExpression" value="30 30 * * * ?" />
	</bean>
	<bean id="updateTeamBonusJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="updateTeamBonusJob" />
		<property name="cronExpression" value="45 40 * * * ?" />
	</bean>
	<!-- 三、配置创建定配置 Quartz 调度器的 SchedulerFactoryBean -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="updateStatJobTrigger" />
				<ref bean="updateCheckUserValideDateJobTrigger" />
				<!-- <ref bean="updateCheckUserBetBonusJobTrigger" />
				<ref bean="updateCheckUserBetTeamBonusJobTrigger" />
				<ref bean="updateCheckTeamBonusJobTrigger" />
				<ref bean="updateTeamBonusJobTrigger" /> -->
			</list>
		</property>
	</bean>
</beans>